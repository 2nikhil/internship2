1. What is the special property of red-black trees and what root should always be?
a) a color which is either red or black and root should always be black color only
b) height of the tree
c) pointer to next node
d) a color which is either green or black
Answer: a
Explanation: An extra attribute which is a color red or black is used. root is black because if it is red then one of red-black tree property which states that number of black nodes from root to null nodes must be same, will be violated. 

2. Why do we impose restrictions like 
 . root property is black
 . every leaf is black
 . children of red node are black
 . all leaves have same black
a) to get logarithm time complexity 
b) to get linear time complexity'
c) to get exponential time complexity
d) to get constant time complexity
Answer: a
Explanation: We impose such restrictions to achieve self balancing trees with logarithmic complexities for insertions, deletions, search.

3. Cosider the below formations of red-black tree.
 
   redblack image

   all the above formations are incorrect for it to be a redblack tree. then what may be the correct order?
a)50-black root, 18-red left subtree, 100-red right subtree
b)50-red root, 18-red left subtree, 100-red right subtree
c)50-black root, 18-black left subtree, 100-red right subtree
d)50-black root, 18-red left subtree, 100-black right subtree
Answer: a
Explanation: Considering all the properties of red-black tree, 50 must be the black root and there are two possibilities for subtrees. one is option a and other is making all nodes of the tree to be black.

4. What are the operations that could be performed in O(logn) time complexity by red-black tree ?
a) insertion, deletion, finding predecessor, successor
b) only insertion
c) only finding predecessor, successor
d) for sorting
Answer: a
Explanation: We impose restrictions (refer question 2) to achieve logarithm time complexities.

5. Which of the following is an application of Red-black trees and why?
a) used to store strings efficiently
b) used to store integers efficiently
c) can be used in process schedulers, maps, sets
d) for efficient sorting
Answer: c
Explanation: RB trees are used in Linux kernel as "Completely Fair Scheduler" process scheduling algorithm. It is used for faster insertions, retrievals.

6. When it would be optimal to prefer Red-black trees over AVL trees ?
a. when there are more insertions or deletions 
b. when more search is needed 
c. when tree must be balanced
d. when log(nodes) time complexity is needed
Answer: a
Explanation: Though both trees are balanced, when there are more insertions and deletions to make the tree balanced, AVL trees should have more rotations, it would be better to use red-black. but if more search is required AVL trees should be used.

7. Why Red-black trees are preferred over hash tables though hash tables have constant time complexity?
a. no they are not preferred
b. because of resizing issues of hash table and better ordering in redblack trees
c. because they can be implemented using trees
d. because they are balanced
Answer: b
Explanation: Redblack trees have O(logn) for ordering elements in terms of finding first and next elements. also whenever table size increases or decreases in hash table you need to perform rehashing which can be very expensive in real time. also red black stores elements in sorted order rather than input order.

8. How can you save memory when storing color information in Red-Black tree?
a) using least significant bit of one of the pointers in the node for color information
b) using another array with colors of each node
c) storing color information in the node structure
d) using negative and positive numbering
Answer: a
Explanation: The node pointers can be used to store color with the help of significant bits. the exceptions of this method are in languages like java where pointers are not used this may not work.

9. When to choose Red-Black tree, AVL tree and B-trees?
a) many inserts, many searches and when managing more items respectively
b) many searches, when managing more items respectively and many inserts respectively
c) sorting, sorting and retrieval respectively
d) retrieval, sorting and retrieval respectively
Answer: a
Explanation: Red black when frequent inserts and deletes, AVL when less frequent inserts and deletes, B-tree when using paging from a slow storage device.

10. What is the below pseudo code trying to do, where pt is a node pointer and root pointer
  redblack(Node root, Node pt) :
    if (root == NULL)
       return pt
 
    if (pt.data < root.data)
    {
        root.left  =   redblack(root.left, pt);
        root.left.parent = root
    }
    else if (pt.data > root.data)
    {
        root.right = redblackt(root.right, pt)
        root.right.parent = root
    }
   return root
a) insert a new node 
b) delete a node
c) search a node
d) count the number of nodes
Answer: a
Explantaion: The code is taking the root node and to be inserted node and is performing insertion operation.
















